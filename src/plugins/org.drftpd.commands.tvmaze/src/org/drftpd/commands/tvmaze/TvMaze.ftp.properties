#info tags    : id, url, name, type, language, genres, status, runtime, premiered,
#               network, country, summary

#prev ep tags : prevepid, prevepurl, prevepname, prevepseason, prevepnumber, prevepairdate,
#             : prevepairtime, prevepruntime, prevepsummary, prevepage

#next ep tags : SAME AS ABOVE but next instead of prev

#ep tags      : SAME AS ABOVE but ep instead of prevep incl info tags

#dir/pre tags : SAME AS EP + section

#verbose version used when -v switch is used.

tv.none=No info found for ${searchstr} :: ${error}

tv.show=${name} - ${url}\nPremiered: ${premiered} - Runtime: ${runtime}m - Country: ${country} - Language: ${language}\nGenre: ${genres} - Network: ${network} - Status: ${status} - Type: ${type}\n${summary}\n${prevep}\n${nextep}
tv.show.verbose=${name} - ${url}\nPremiered: ${premiered} - Runtime: ${runtime}m - Country: ${country} - Language: ${language}\nGenre: ${genres} - Network: ${network} - Status: ${status} - Type: ${type}\n${summary}\n${prevep}\n${nextep}
# Previous and next episode lines are added to tv.show output with ${prevep} and ${nextep} tags.
tv.prevep=Previous episode: ${prevepseason}x${prevepnumber} - ${prevepname} - Aired ${prevepage} ago (${prevepairdate}) - ${prevepurl}
tv.prevep.verbose=Previous episode: ${prevepseason}x${prevepnumber} - ${prevepname} - Aired ${prevepage} ago (${prevepairdate}) - ${prevepurl}
tv.nextep=Next episode: ${nextepseason}x${nextepnumber} - ${nextepname} - Airs in ${nextepage} (${nextepairdate}) - ${nextepurl}
tv.nextep.verbose=Next episode: ${nextepseason}x${nextepnumber} - ${nextepname} - Airs in ${nextepage} (${nextepairdate}) - ${nextepurl}

tv.ep=${name}\n${epseason}x${epnumber} - ${epname} - ${epurl}\nAiring: ${epairtime} on ${network} - Age: ${epage} (${epairdate})\n${release}
tv.ep.verbose=${name}\n${epseason}x${epnumber} - ${epname} - ${epurl}\nAiring: ${epairtime} on ${network} - Age: ${epage} (${epairdate})\n${release}
# Release info added to tv.ep output with ${release} tag.
tv.ep.release= Exist in :: SD: ${foundSD}, HD: ${foundHD} :: ${results} match(es) found
tv.ep.release.verbose= Exist in :: SD: ${foundSD}, HD: ${foundHD} :: ${results} match(es) found

tv.ep.season.header=${name} - Genre: ${genres} - Network: ${network} - Status: ${status} - Type: ${type}
tv.ep.season.header.verbose=${name} - Genre: ${genres} - Network: ${network} - Status: ${status} - Type: ${type}
tv.ep.season=${epseason}x${epnumber} - ${epname} - Aired ${epage} ago (${epairdate}) - ${epurl}
tv.ep.season.verbose=${epseason}x${epnumber} - ${epname} - Aired ${epage} ago (${epairdate}) - ${epurl}

#Tags: dirname dirpath + Above show tags
#what to show when adding metadata for dir on CREATETV command
createtvmaze.add=Added TvMaze metadata to ${dirpath}\n
createtvmaze.cache=TvMAze metadata already added to ${dirpath}\n
createtvmaze.start=TvMaze metadata creation started on ${dirpath}\n
createtvmaze.complete=Finnished creating TvMaze metadata on ${dirpath}
createtvmaze.aborted=Creation of TvMaze metadata was aborted before it could complete

#Tags: dirname dirpath + Above show tags
#what to show when removing metadata for dir on REMOVETV command
removetvmaze.remove=Removed TvMaze metadata for ${dirpath}\n
removetvmaze.start=TvMaze metadata deletion started on ${dirpath}\n
removetvmaze.complete=Finnished removing TvMaze metadata on ${dirpath}
removetvmaze.aborted=TvMaze metadata deletion was aborted before it could complete

tv.queue=Items in queue: ${size}